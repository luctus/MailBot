<?php


/**
 * Skeleton subclass for representing a row from the 'mb_mail' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jun  8 16:04:14 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class MbMail extends BaseMbMail {

  private $more_recipients = false;
  private $swift_message = false;
  private $swift_transport = false;
  private $swift_mailer = false;

  public function __construct()
  {
    parent::__construct();
  }

  public function  __toString() {
    return '[' . $this->getId() . '] ' .substr($this->getSubject(), 0, 30);
  }

  public function getNextRecipients($nb = false)
  {
    if(!$nb)
      $nb = $this->getBatchSize();
    if(!$nb)
      $nb = 3;
  	
    $c = new Criteria();
    $c->add(MbMailtoPeer::MAIL_ID, $this->getId());
    $c->add(MbMailtoPeer::STATE, null, Criteria::ISNULL);
    $c->addAscendingOrderByColumn(MbMailtoPeer::ID);
    $c->setLimit($nb+1);
  	
    $mb_mailto_list = MbMailtoPeer::doSelect($c);
  	
    if($mb_mailto_list && sizeof($mb_mailto_list) > $nb)
    {
      $this->more_recipients = true;
      array_pop($mb_mailto_list);    	
    }
    else
      $this->more_recipients = false;
  	
    return $mb_mailto_list;
  }
  
  public function hasMoreRecipients()
  {
    return $this->more_recipients;
  } 
  
  public function send(MbMailto $mailto)
  {
    if(!$mailto->validateAndReport())
      return true;

    if($message = $this->getSwiftMessage())
    {
      foreach($mailto->getEmails() as $i => $email)
      {
        if($i == 0)
          $message->setTo($email);
        else
          $message->addTo($email);
      }
      if($this->getSwiftMailer()->send($message))
      {
        $mailto->setState('ok');
      }
      else
      {
        $mailto->setState('error');

        if($this->getError())
          $mailto->setError('No se pudo enviar el correo porque estaba mal definido (' . $this->getError() . ')');
      
        else
          $mailto->setError('No se pudo entregar el correo a este destinatario. Verifique direccion');
      }
      $mailto->setSentAt(time());
      $mailto->save();    
      
    }
    else
    {
      $this->reportErrorToRecipients('No se pudo enviar el correo porque estaba mal definido (' . $this->getError() . ')');
      return false;
    }

    return true;
  }

  public function getSwiftMessage()
  {
    if($this->getError())
      return false;

    if(!$this->swift_message)
      if(!$this->initSwiftMessage())
        return false;

    return $this->swift_message;
  }

  public function getSwiftMailer()
  {
    if(!$this->swift_mailer)
      $this->swift_mailer = Swift_Mailer::newInstance($this->getSwiftTransport());
    return $this->swift_mailer;
  }

  public function getSwiftTransport()
  {
    if(!$this->swift_transport)
    {
      $smtp_host = sfConfig::get('app_smtp_host');
      $smtp_port = sfConfig::get('app_smtp_port', 25);
      if(!$smtp_host)
        return false;
      $this->swift_transport = Swift_SmtpTransport::newInstance($smtp_host, $smtp_port);
    }
    return $this->swift_transport;
  }

  public function initSwiftMessage()
  {
    ProjectConfiguration::registerSwift();
    ProjectConfiguration::registerSimplehtmldom();
    $this->swift_message = Swift_Message::newInstance();
    $this->swift_message->setSubject($this->getSubjectClean());
    $this->swift_message->setPriority(2);
    $this->swift_message->setFrom(MailbotTools::getAutoAddress($this->getStrfrom()));
    
    if($this->getBodyHtml())
    {
      //Embed images
      $html = new simple_html_dom();
      $html->load($this->getBodyHtmlClean());
      if($images = $html->find('img'))
      {
        foreach($images as $image)
        {
          if(substr($image->src, 0, 4) == 'http')
            $image->src = $this->swift_message->embed(Swift_Image::fromPath($image->src));
          else
          {
            $full_path = MailbotTools::getFullPath($this->getPublicPath() , $image->src);
            if(!$errors = MailbotTools::getAttachErrors($full_path))
              $image->src = $this->swift_message->embed(Swift_Image::fromPath($full_path));
            else
            {
              $this->setError(implode('<br/>', $errors));
              $this->setState('error');
              $this->save();
              $this->notifyError();
              return false;
            }
          }
        }
      }
      
      $this->swift_message->setBody($html, 'text/html');
      if($this->getBodyText())
        $this->swift_message->addPart($this->getBodyTextClean(), 'text/plain');
    }

    elseif($this->getBodyText())
    {
      $this->swift_message->setBody($this->getBodyTextClean(), 'text/plain');
    }

    //Attachments
    if($mb_attachments = $this->getMbMailAttachments())
    {
      foreach($mb_attachments as $mb_attachment)
      {
        $full_path = MailbotTools::getFullPath($this->getPublicPath() , $mb_attachment->getUrl());
        if(!$errors = MailbotTools::getAttachErrors($full_path))
        {
          $attachment = Swift_Attachment::fromPath($full_path);
          $this->swift_message->attach($attachment);
        }
        else
        {
          $this->setError(implode('<br/>', $errors));
          $this->setState('error');
          $this->save();
          $this->notifyError();
          return false;
        }
      }
    }        
    return true;
  }

  public function reportErrorToRecipients($message)
  {
    MbMailtoQuery::create()->filterByMailId($this->getId())->filterByState(null, Criteria::ISNULL)
            ->update(array('Error' => $message, 'State' => 'error', 'SentAt' => time()));
  }

  public function getNbSuccessRecipients()
  {
    return MbMailPeer::getNbRecipientsByState($this->getId(), 'ok');
  }

  public function getProgress()
  {
    return $this->getNbSuccessRecipients() . '/' . $this->getNbRecipients();
  }

  public function getNbErrorRecipients()
  {
    return MbMailPeer::getNbRecipientsByState($this->getId(), 'error');
  }

  public function getNbErrors()
  {
    return $this->getNbErrorRecipients();
  }

  public function getNbRecipients()
  {
    return MbMailPeer::getNbRecipientsByState($this->getId());
  }

  public function notifyIfNecessary()
  {
  	return MailbotTools::notifyIfNecessary($this);
  }

  public function notifyError()
  {
  	return MailbotTools::notifyError($this);
  }

  public function isPending()
  {
    return ($this->getState() == 'stop' || $this->getState() == null);
  }

  public function getSubjectClean()
  {
    return MailbotTools::clean($this->getSubject());
    //return iconv("UTF-8", "ISO-8859-1", $this->getSubject());
  }

  public function getBodyHtmlClean()
  {
    return MailbotTools::clean($this->getBodyHtml());
    //return iconv("UTF-8", "ISO-8859-1", $this->getBodyHtml());
  }

  public function getBodyTextClean()
  {
    return MailbotTools::clean($this->getBodyText());
    //return iconv("UTF-8", "ISO-8859-1", $this->getBodyText());
  }
  
  //TODO: IsFast()
  //TODO: IsSlow()

} // MbMail
