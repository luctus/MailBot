<?php


/**
 * Base class that represents a row from the 'mb_mail' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3-dev on:
 *
 * Wed Aug  4 22:47:56 2010
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseMbMail extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
  const PEER = 'MbMailPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MbMailPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the body_html field.
	 * @var        string
	 */
	protected $body_html;

	/**
	 * The value for the body_text field.
	 * @var        string
	 */
	protected $body_text;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the subject field.
	 * @var        string
	 */
	protected $subject;

	/**
	 * The value for the strfrom field.
	 * @var        string
	 */
	protected $strfrom;

	/**
	 * The value for the reply_to field.
	 * @var        string
	 */
	protected $reply_to;

	/**
	 * The value for the notify_to field.
	 * @var        string
	 */
	protected $notify_to;

	/**
	 * The value for the platform field.
	 * @var        string
	 */
	protected $platform;

	/**
	 * The value for the public_path field.
	 * @var        string
	 */
	protected $public_path;

	/**
	 * The value for the batch_size field.
	 * Note: this column has a database default value of: 10
	 * @var        int
	 */
	protected $batch_size;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the error field.
	 * @var        string
	 */
	protected $error;

	/**
	 * The value for the token field.
	 * @var        string
	 */
	protected $token;

	/**
	 * @var        array MbMailto[] Collection to store aggregation of MbMailto objects.
	 */
	protected $collMbMailtos;

	/**
	 * @var        array MbMailAttachment[] Collection to store aggregation of MbMailAttachment objects.
	 */
	protected $collMbMailAttachments;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->batch_size = 10;
	}

	/**
	 * Initializes internal state of BaseMbMail object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [body_html] column value.
	 * 
	 * @return     string
	 */
	public function getBodyHtml()
	{
		return $this->body_html;
	}

	/**
	 * Get the [body_text] column value.
	 * 
	 * @return     string
	 */
	public function getBodyText()
	{
		return $this->body_text;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [subject] column value.
	 * 
	 * @return     string
	 */
	public function getSubject()
	{
		return $this->subject;
	}

	/**
	 * Get the [strfrom] column value.
	 * 
	 * @return     string
	 */
	public function getStrfrom()
	{
		return $this->strfrom;
	}

	/**
	 * Get the [reply_to] column value.
	 * 
	 * @return     string
	 */
	public function getReplyTo()
	{
		return $this->reply_to;
	}

	/**
	 * Get the [notify_to] column value.
	 * 
	 * @return     string
	 */
	public function getNotifyTo()
	{
		return $this->notify_to;
	}

	/**
	 * Get the [platform] column value.
	 * 
	 * @return     string
	 */
	public function getPlatform()
	{
		return $this->platform;
	}

	/**
	 * Get the [public_path] column value.
	 * 
	 * @return     string
	 */
	public function getPublicPath()
	{
		return $this->public_path;
	}

	/**
	 * Get the [batch_size] column value.
	 * 
	 * @return     int
	 */
	public function getBatchSize()
	{
		return $this->batch_size;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [error] column value.
	 * 
	 * @return     string
	 */
	public function getError()
	{
		return $this->error;
	}

	/**
	 * Get the [token] column value.
	 * 
	 * @return     string
	 */
	public function getToken()
	{
		return $this->token;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MbMailPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = MbMailPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [body_html] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setBodyHtml($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->body_html !== $v) {
			$this->body_html = $v;
			$this->modifiedColumns[] = MbMailPeer::BODY_HTML;
		}

		return $this;
	} // setBodyHtml()

	/**
	 * Set the value of [body_text] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setBodyText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->body_text !== $v) {
			$this->body_text = $v;
			$this->modifiedColumns[] = MbMailPeer::BODY_TEXT;
		}

		return $this;
	} // setBodyText()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MbMailPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [subject] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setSubject($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subject !== $v) {
			$this->subject = $v;
			$this->modifiedColumns[] = MbMailPeer::SUBJECT;
		}

		return $this;
	} // setSubject()

	/**
	 * Set the value of [strfrom] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setStrfrom($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->strfrom !== $v) {
			$this->strfrom = $v;
			$this->modifiedColumns[] = MbMailPeer::STRFROM;
		}

		return $this;
	} // setStrfrom()

	/**
	 * Set the value of [reply_to] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setReplyTo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reply_to !== $v) {
			$this->reply_to = $v;
			$this->modifiedColumns[] = MbMailPeer::REPLY_TO;
		}

		return $this;
	} // setReplyTo()

	/**
	 * Set the value of [notify_to] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setNotifyTo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notify_to !== $v) {
			$this->notify_to = $v;
			$this->modifiedColumns[] = MbMailPeer::NOTIFY_TO;
		}

		return $this;
	} // setNotifyTo()

	/**
	 * Set the value of [platform] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setPlatform($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->platform !== $v) {
			$this->platform = $v;
			$this->modifiedColumns[] = MbMailPeer::PLATFORM;
		}

		return $this;
	} // setPlatform()

	/**
	 * Set the value of [public_path] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setPublicPath($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->public_path !== $v) {
			$this->public_path = $v;
			$this->modifiedColumns[] = MbMailPeer::PUBLIC_PATH;
		}

		return $this;
	} // setPublicPath()

	/**
	 * Set the value of [batch_size] column.
	 * 
	 * @param      int $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setBatchSize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->batch_size !== $v || $this->isNew()) {
			$this->batch_size = $v;
			$this->modifiedColumns[] = MbMailPeer::BATCH_SIZE;
		}

		return $this;
	} // setBatchSize()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = MbMailPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [error] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setError($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->error !== $v) {
			$this->error = $v;
			$this->modifiedColumns[] = MbMailPeer::ERROR;
		}

		return $this;
	} // setError()

	/**
	 * Set the value of [token] column.
	 * 
	 * @param      string $v new value
	 * @return     MbMail The current object (for fluent API support)
	 */
	public function setToken($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->token !== $v) {
			$this->token = $v;
			$this->modifiedColumns[] = MbMailPeer::TOKEN;
		}

		return $this;
	} // setToken()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->batch_size !== 10) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->username = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->body_html = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->body_text = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->created_at = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->subject = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->strfrom = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->reply_to = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->notify_to = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->platform = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->public_path = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->batch_size = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->state = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->error = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->token = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 15; // 15 = MbMailPeer::NUM_COLUMNS - MbMailPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating MbMail object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MbMailPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MbMailPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collMbMailtos = null;

			$this->collMbMailAttachments = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MbMailPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMbMail:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				MbMailQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMbMail:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MbMailPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMbMail:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(MbMailPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMbMail:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				MbMailPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MbMailPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(MbMailPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.MbMailPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows = 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows = MbMailPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collMbMailtos !== null) {
				foreach ($this->collMbMailtos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMbMailAttachments !== null) {
				foreach ($this->collMbMailAttachments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = MbMailPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collMbMailtos !== null) {
					foreach ($this->collMbMailtos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMbMailAttachments !== null) {
					foreach ($this->collMbMailAttachments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MbMailPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUsername();
				break;
			case 2:
				return $this->getBodyHtml();
				break;
			case 3:
				return $this->getBodyText();
				break;
			case 4:
				return $this->getCreatedAt();
				break;
			case 5:
				return $this->getSubject();
				break;
			case 6:
				return $this->getStrfrom();
				break;
			case 7:
				return $this->getReplyTo();
				break;
			case 8:
				return $this->getNotifyTo();
				break;
			case 9:
				return $this->getPlatform();
				break;
			case 10:
				return $this->getPublicPath();
				break;
			case 11:
				return $this->getBatchSize();
				break;
			case 12:
				return $this->getState();
				break;
			case 13:
				return $this->getError();
				break;
			case 14:
				return $this->getToken();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. 
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MbMailPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUsername(),
			$keys[2] => $this->getBodyHtml(),
			$keys[3] => $this->getBodyText(),
			$keys[4] => $this->getCreatedAt(),
			$keys[5] => $this->getSubject(),
			$keys[6] => $this->getStrfrom(),
			$keys[7] => $this->getReplyTo(),
			$keys[8] => $this->getNotifyTo(),
			$keys[9] => $this->getPlatform(),
			$keys[10] => $this->getPublicPath(),
			$keys[11] => $this->getBatchSize(),
			$keys[12] => $this->getState(),
			$keys[13] => $this->getError(),
			$keys[14] => $this->getToken(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MbMailPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUsername($value);
				break;
			case 2:
				$this->setBodyHtml($value);
				break;
			case 3:
				$this->setBodyText($value);
				break;
			case 4:
				$this->setCreatedAt($value);
				break;
			case 5:
				$this->setSubject($value);
				break;
			case 6:
				$this->setStrfrom($value);
				break;
			case 7:
				$this->setReplyTo($value);
				break;
			case 8:
				$this->setNotifyTo($value);
				break;
			case 9:
				$this->setPlatform($value);
				break;
			case 10:
				$this->setPublicPath($value);
				break;
			case 11:
				$this->setBatchSize($value);
				break;
			case 12:
				$this->setState($value);
				break;
			case 13:
				$this->setError($value);
				break;
			case 14:
				$this->setToken($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MbMailPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUsername($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setBodyHtml($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setBodyText($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCreatedAt($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSubject($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setStrfrom($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setReplyTo($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNotifyTo($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPlatform($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPublicPath($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setBatchSize($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setState($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setError($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setToken($arr[$keys[14]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MbMailPeer::DATABASE_NAME);

		if ($this->isColumnModified(MbMailPeer::ID)) $criteria->add(MbMailPeer::ID, $this->id);
		if ($this->isColumnModified(MbMailPeer::USERNAME)) $criteria->add(MbMailPeer::USERNAME, $this->username);
		if ($this->isColumnModified(MbMailPeer::BODY_HTML)) $criteria->add(MbMailPeer::BODY_HTML, $this->body_html);
		if ($this->isColumnModified(MbMailPeer::BODY_TEXT)) $criteria->add(MbMailPeer::BODY_TEXT, $this->body_text);
		if ($this->isColumnModified(MbMailPeer::CREATED_AT)) $criteria->add(MbMailPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(MbMailPeer::SUBJECT)) $criteria->add(MbMailPeer::SUBJECT, $this->subject);
		if ($this->isColumnModified(MbMailPeer::STRFROM)) $criteria->add(MbMailPeer::STRFROM, $this->strfrom);
		if ($this->isColumnModified(MbMailPeer::REPLY_TO)) $criteria->add(MbMailPeer::REPLY_TO, $this->reply_to);
		if ($this->isColumnModified(MbMailPeer::NOTIFY_TO)) $criteria->add(MbMailPeer::NOTIFY_TO, $this->notify_to);
		if ($this->isColumnModified(MbMailPeer::PLATFORM)) $criteria->add(MbMailPeer::PLATFORM, $this->platform);
		if ($this->isColumnModified(MbMailPeer::PUBLIC_PATH)) $criteria->add(MbMailPeer::PUBLIC_PATH, $this->public_path);
		if ($this->isColumnModified(MbMailPeer::BATCH_SIZE)) $criteria->add(MbMailPeer::BATCH_SIZE, $this->batch_size);
		if ($this->isColumnModified(MbMailPeer::STATE)) $criteria->add(MbMailPeer::STATE, $this->state);
		if ($this->isColumnModified(MbMailPeer::ERROR)) $criteria->add(MbMailPeer::ERROR, $this->error);
		if ($this->isColumnModified(MbMailPeer::TOKEN)) $criteria->add(MbMailPeer::TOKEN, $this->token);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MbMailPeer::DATABASE_NAME);
		$criteria->add(MbMailPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of MbMail (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{
		$copyObj->setUsername($this->username);
		$copyObj->setBodyHtml($this->body_html);
		$copyObj->setBodyText($this->body_text);
		$copyObj->setCreatedAt($this->created_at);
		$copyObj->setSubject($this->subject);
		$copyObj->setStrfrom($this->strfrom);
		$copyObj->setReplyTo($this->reply_to);
		$copyObj->setNotifyTo($this->notify_to);
		$copyObj->setPlatform($this->platform);
		$copyObj->setPublicPath($this->public_path);
		$copyObj->setBatchSize($this->batch_size);
		$copyObj->setState($this->state);
		$copyObj->setError($this->error);
		$copyObj->setToken($this->token);

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getMbMailtos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMbMailto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMbMailAttachments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMbMailAttachment($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);
		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     MbMail Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MbMailPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MbMailPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collMbMailtos collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMbMailtos()
	 */
	public function clearMbMailtos()
	{
		$this->collMbMailtos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMbMailtos collection.
	 *
	 * By default this just sets the collMbMailtos collection to an empty array (like clearcollMbMailtos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMbMailtos()
	{
		$this->collMbMailtos = new PropelObjectCollection();
		$this->collMbMailtos->setModel('MbMailto');
	}

	/**
	 * Gets an array of MbMailto objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this MbMail is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array MbMailto[] List of MbMailto objects
	 * @throws     PropelException
	 */
	public function getMbMailtos($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collMbMailtos || null !== $criteria) {
			if ($this->isNew() && null === $this->collMbMailtos) {
				// return empty collection
				$this->initMbMailtos();
			} else {
				$collMbMailtos = MbMailtoQuery::create(null, $criteria)
					->filterByMbMail($this)
					->find($con);
				if (null !== $criteria) {
					return $collMbMailtos;
				}
				$this->collMbMailtos = $collMbMailtos;
			}
		}
		return $this->collMbMailtos;
	}

	/**
	 * Returns the number of related MbMailto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MbMailto objects.
	 * @throws     PropelException
	 */
	public function countMbMailtos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collMbMailtos || null !== $criteria) {
			if ($this->isNew() && null === $this->collMbMailtos) {
				return 0;
			} else {
				$query = MbMailtoQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByMbMail($this)
					->count($con);
			}
		} else {
			return count($this->collMbMailtos);
		}
	}

	/**
	 * Method called to associate a MbMailto object to this object
	 * through the MbMailto foreign key attribute.
	 *
	 * @param      MbMailto $l MbMailto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMbMailto(MbMailto $l)
	{
		if ($this->collMbMailtos === null) {
			$this->initMbMailtos();
		}
		if (!$this->collMbMailtos->contains($l)) { // only add it if the **same** object is not already associated
			$this->collMbMailtos[]= $l;
			$l->setMbMail($this);
		}
	}

	/**
	 * Clears out the collMbMailAttachments collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMbMailAttachments()
	 */
	public function clearMbMailAttachments()
	{
		$this->collMbMailAttachments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMbMailAttachments collection.
	 *
	 * By default this just sets the collMbMailAttachments collection to an empty array (like clearcollMbMailAttachments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMbMailAttachments()
	{
		$this->collMbMailAttachments = new PropelObjectCollection();
		$this->collMbMailAttachments->setModel('MbMailAttachment');
	}

	/**
	 * Gets an array of MbMailAttachment objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this MbMail is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array MbMailAttachment[] List of MbMailAttachment objects
	 * @throws     PropelException
	 */
	public function getMbMailAttachments($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collMbMailAttachments || null !== $criteria) {
			if ($this->isNew() && null === $this->collMbMailAttachments) {
				// return empty collection
				$this->initMbMailAttachments();
			} else {
				$collMbMailAttachments = MbMailAttachmentQuery::create(null, $criteria)
					->filterByMbMail($this)
					->find($con);
				if (null !== $criteria) {
					return $collMbMailAttachments;
				}
				$this->collMbMailAttachments = $collMbMailAttachments;
			}
		}
		return $this->collMbMailAttachments;
	}

	/**
	 * Returns the number of related MbMailAttachment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MbMailAttachment objects.
	 * @throws     PropelException
	 */
	public function countMbMailAttachments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collMbMailAttachments || null !== $criteria) {
			if ($this->isNew() && null === $this->collMbMailAttachments) {
				return 0;
			} else {
				$query = MbMailAttachmentQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByMbMail($this)
					->count($con);
			}
		} else {
			return count($this->collMbMailAttachments);
		}
	}

	/**
	 * Method called to associate a MbMailAttachment object to this object
	 * through the MbMailAttachment foreign key attribute.
	 *
	 * @param      MbMailAttachment $l MbMailAttachment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMbMailAttachment(MbMailAttachment $l)
	{
		if ($this->collMbMailAttachments === null) {
			$this->initMbMailAttachments();
		}
		if (!$this->collMbMailAttachments->contains($l)) { // only add it if the **same** object is not already associated
			$this->collMbMailAttachments[]= $l;
			$l->setMbMail($this);
		}
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->username = null;
		$this->body_html = null;
		$this->body_text = null;
		$this->created_at = null;
		$this->subject = null;
		$this->strfrom = null;
		$this->reply_to = null;
		$this->notify_to = null;
		$this->platform = null;
		$this->public_path = null;
		$this->batch_size = null;
		$this->state = null;
		$this->error = null;
		$this->token = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->applyDefaultValues();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collMbMailtos) {
				foreach ((array) $this->collMbMailtos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMbMailAttachments) {
				foreach ((array) $this->collMbMailAttachments as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collMbMailtos = null;
		$this->collMbMailAttachments = null;
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseMbMail:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseMbMail
