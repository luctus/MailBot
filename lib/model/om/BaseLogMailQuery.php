<?php


/**
 * Base class that represents a query for the 'log_mail' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.3-dev on:
 *
 * Wed Aug  4 22:47:56 2010
 *
 * @method     LogMailQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     LogMailQuery orderByUsername($order = Criteria::ASC) Order by the username column
 * @method     LogMailQuery orderByBodyHtml($order = Criteria::ASC) Order by the body_html column
 * @method     LogMailQuery orderByBodyText($order = Criteria::ASC) Order by the body_text column
 * @method     LogMailQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     LogMailQuery orderBySubject($order = Criteria::ASC) Order by the subject column
 * @method     LogMailQuery orderByStrfrom($order = Criteria::ASC) Order by the strfrom column
 * @method     LogMailQuery orderByReplyTo($order = Criteria::ASC) Order by the reply_to column
 * @method     LogMailQuery orderByNotifyTo($order = Criteria::ASC) Order by the notify_to column
 * @method     LogMailQuery orderByPlatform($order = Criteria::ASC) Order by the platform column
 * @method     LogMailQuery orderByPublicPath($order = Criteria::ASC) Order by the public_path column
 * @method     LogMailQuery orderByBatchSize($order = Criteria::ASC) Order by the batch_size column
 * @method     LogMailQuery orderByState($order = Criteria::ASC) Order by the state column
 * @method     LogMailQuery orderByError($order = Criteria::ASC) Order by the error column
 * @method     LogMailQuery orderByToken($order = Criteria::ASC) Order by the token column
 *
 * @method     LogMailQuery groupById() Group by the id column
 * @method     LogMailQuery groupByUsername() Group by the username column
 * @method     LogMailQuery groupByBodyHtml() Group by the body_html column
 * @method     LogMailQuery groupByBodyText() Group by the body_text column
 * @method     LogMailQuery groupByCreatedAt() Group by the created_at column
 * @method     LogMailQuery groupBySubject() Group by the subject column
 * @method     LogMailQuery groupByStrfrom() Group by the strfrom column
 * @method     LogMailQuery groupByReplyTo() Group by the reply_to column
 * @method     LogMailQuery groupByNotifyTo() Group by the notify_to column
 * @method     LogMailQuery groupByPlatform() Group by the platform column
 * @method     LogMailQuery groupByPublicPath() Group by the public_path column
 * @method     LogMailQuery groupByBatchSize() Group by the batch_size column
 * @method     LogMailQuery groupByState() Group by the state column
 * @method     LogMailQuery groupByError() Group by the error column
 * @method     LogMailQuery groupByToken() Group by the token column
 *
 * @method     LogMailQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     LogMailQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     LogMailQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     LogMailQuery leftJoinLogMailto($relationAlias = '') Adds a LEFT JOIN clause to the query using the LogMailto relation
 * @method     LogMailQuery rightJoinLogMailto($relationAlias = '') Adds a RIGHT JOIN clause to the query using the LogMailto relation
 * @method     LogMailQuery innerJoinLogMailto($relationAlias = '') Adds a INNER JOIN clause to the query using the LogMailto relation
 *
 * @method     LogMailQuery leftJoinLogMailAttachment($relationAlias = '') Adds a LEFT JOIN clause to the query using the LogMailAttachment relation
 * @method     LogMailQuery rightJoinLogMailAttachment($relationAlias = '') Adds a RIGHT JOIN clause to the query using the LogMailAttachment relation
 * @method     LogMailQuery innerJoinLogMailAttachment($relationAlias = '') Adds a INNER JOIN clause to the query using the LogMailAttachment relation
 *
 * @method     LogMail findOne(PropelPDO $con = null) Return the first LogMail matching the query
 * @method     LogMail findOneOrCreate(PropelPDO $con = null) Return the first LogMail matching the query, or a new LogMail object populated from the query conditions when no match is found
 *
 * @method     LogMail findOneById(int $id) Return the first LogMail filtered by the id column
 * @method     LogMail findOneByUsername(string $username) Return the first LogMail filtered by the username column
 * @method     LogMail findOneByBodyHtml(string $body_html) Return the first LogMail filtered by the body_html column
 * @method     LogMail findOneByBodyText(string $body_text) Return the first LogMail filtered by the body_text column
 * @method     LogMail findOneByCreatedAt(string $created_at) Return the first LogMail filtered by the created_at column
 * @method     LogMail findOneBySubject(string $subject) Return the first LogMail filtered by the subject column
 * @method     LogMail findOneByStrfrom(string $strfrom) Return the first LogMail filtered by the strfrom column
 * @method     LogMail findOneByReplyTo(string $reply_to) Return the first LogMail filtered by the reply_to column
 * @method     LogMail findOneByNotifyTo(string $notify_to) Return the first LogMail filtered by the notify_to column
 * @method     LogMail findOneByPlatform(string $platform) Return the first LogMail filtered by the platform column
 * @method     LogMail findOneByPublicPath(string $public_path) Return the first LogMail filtered by the public_path column
 * @method     LogMail findOneByBatchSize(int $batch_size) Return the first LogMail filtered by the batch_size column
 * @method     LogMail findOneByState(string $state) Return the first LogMail filtered by the state column
 * @method     LogMail findOneByError(string $error) Return the first LogMail filtered by the error column
 * @method     LogMail findOneByToken(string $token) Return the first LogMail filtered by the token column
 *
 * @method     array findById(int $id) Return LogMail objects filtered by the id column
 * @method     array findByUsername(string $username) Return LogMail objects filtered by the username column
 * @method     array findByBodyHtml(string $body_html) Return LogMail objects filtered by the body_html column
 * @method     array findByBodyText(string $body_text) Return LogMail objects filtered by the body_text column
 * @method     array findByCreatedAt(string $created_at) Return LogMail objects filtered by the created_at column
 * @method     array findBySubject(string $subject) Return LogMail objects filtered by the subject column
 * @method     array findByStrfrom(string $strfrom) Return LogMail objects filtered by the strfrom column
 * @method     array findByReplyTo(string $reply_to) Return LogMail objects filtered by the reply_to column
 * @method     array findByNotifyTo(string $notify_to) Return LogMail objects filtered by the notify_to column
 * @method     array findByPlatform(string $platform) Return LogMail objects filtered by the platform column
 * @method     array findByPublicPath(string $public_path) Return LogMail objects filtered by the public_path column
 * @method     array findByBatchSize(int $batch_size) Return LogMail objects filtered by the batch_size column
 * @method     array findByState(string $state) Return LogMail objects filtered by the state column
 * @method     array findByError(string $error) Return LogMail objects filtered by the error column
 * @method     array findByToken(string $token) Return LogMail objects filtered by the token column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseLogMailQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseLogMailQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'LogMail', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new LogMailQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    LogMailQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof LogMailQuery) {
			return $criteria;
		}
		$query = new LogMailQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    LogMail|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = LogMailPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{	
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(LogMailPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(LogMailPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(LogMailPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the username column
	 * 
	 * @param     string $username The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByUsername($username = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($username)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $username)) {
				$username = str_replace('*', '%', $username);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::USERNAME, $username, $comparison);
	}

	/**
	 * Filter the query on the body_html column
	 * 
	 * @param     string $bodyHtml The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByBodyHtml($bodyHtml = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($bodyHtml)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $bodyHtml)) {
				$bodyHtml = str_replace('*', '%', $bodyHtml);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::BODY_HTML, $bodyHtml, $comparison);
	}

	/**
	 * Filter the query on the body_text column
	 * 
	 * @param     string $bodyText The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByBodyText($bodyText = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($bodyText)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $bodyText)) {
				$bodyText = str_replace('*', '%', $bodyText);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::BODY_TEXT, $bodyText, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $createdAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(LogMailPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(LogMailPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(LogMailPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the subject column
	 * 
	 * @param     string $subject The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterBySubject($subject = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($subject)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $subject)) {
				$subject = str_replace('*', '%', $subject);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::SUBJECT, $subject, $comparison);
	}

	/**
	 * Filter the query on the strfrom column
	 * 
	 * @param     string $strfrom The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByStrfrom($strfrom = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($strfrom)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $strfrom)) {
				$strfrom = str_replace('*', '%', $strfrom);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::STRFROM, $strfrom, $comparison);
	}

	/**
	 * Filter the query on the reply_to column
	 * 
	 * @param     string $replyTo The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByReplyTo($replyTo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($replyTo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $replyTo)) {
				$replyTo = str_replace('*', '%', $replyTo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::REPLY_TO, $replyTo, $comparison);
	}

	/**
	 * Filter the query on the notify_to column
	 * 
	 * @param     string $notifyTo The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByNotifyTo($notifyTo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($notifyTo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $notifyTo)) {
				$notifyTo = str_replace('*', '%', $notifyTo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::NOTIFY_TO, $notifyTo, $comparison);
	}

	/**
	 * Filter the query on the platform column
	 * 
	 * @param     string $platform The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByPlatform($platform = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($platform)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $platform)) {
				$platform = str_replace('*', '%', $platform);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::PLATFORM, $platform, $comparison);
	}

	/**
	 * Filter the query on the public_path column
	 * 
	 * @param     string $publicPath The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByPublicPath($publicPath = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($publicPath)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $publicPath)) {
				$publicPath = str_replace('*', '%', $publicPath);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::PUBLIC_PATH, $publicPath, $comparison);
	}

	/**
	 * Filter the query on the batch_size column
	 * 
	 * @param     int|array $batchSize The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByBatchSize($batchSize = null, $comparison = null)
	{
		if (is_array($batchSize)) {
			$useMinMax = false;
			if (isset($batchSize['min'])) {
				$this->addUsingAlias(LogMailPeer::BATCH_SIZE, $batchSize['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($batchSize['max'])) {
				$this->addUsingAlias(LogMailPeer::BATCH_SIZE, $batchSize['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(LogMailPeer::BATCH_SIZE, $batchSize, $comparison);
	}

	/**
	 * Filter the query on the state column
	 * 
	 * @param     string $state The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByState($state = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($state)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $state)) {
				$state = str_replace('*', '%', $state);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::STATE, $state, $comparison);
	}

	/**
	 * Filter the query on the error column
	 * 
	 * @param     string $error The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByError($error = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($error)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $error)) {
				$error = str_replace('*', '%', $error);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::ERROR, $error, $comparison);
	}

	/**
	 * Filter the query on the token column
	 * 
	 * @param     string $token The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByToken($token = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($token)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $token)) {
				$token = str_replace('*', '%', $token);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(LogMailPeer::TOKEN, $token, $comparison);
	}

	/**
	 * Filter the query by a related LogMailto object
	 *
	 * @param     LogMailto $logMailto  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByLogMailto($logMailto, $comparison = null)
	{
		return $this
			->addUsingAlias(LogMailPeer::ID, $logMailto->getMailId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the LogMailto relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function joinLogMailto($relationAlias = '', $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('LogMailto');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'LogMailto');
		}
		
		return $this;
	}

	/**
	 * Use the LogMailto relation LogMailto object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LogMailtoQuery A secondary query class using the current class as primary query
	 */
	public function useLogMailtoQuery($relationAlias = '', $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinLogMailto($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'LogMailto', 'LogMailtoQuery');
	}

	/**
	 * Filter the query by a related LogMailAttachment object
	 *
	 * @param     LogMailAttachment $logMailAttachment  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function filterByLogMailAttachment($logMailAttachment, $comparison = null)
	{
		return $this
			->addUsingAlias(LogMailPeer::ID, $logMailAttachment->getMailId(), $comparison);
	}

	/**
	 * Adds a JOIN clause to the query using the LogMailAttachment relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function joinLogMailAttachment($relationAlias = '', $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('LogMailAttachment');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'LogMailAttachment');
		}
		
		return $this;
	}

	/**
	 * Use the LogMailAttachment relation LogMailAttachment object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LogMailAttachmentQuery A secondary query class using the current class as primary query
	 */
	public function useLogMailAttachmentQuery($relationAlias = '', $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinLogMailAttachment($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'LogMailAttachment', 'LogMailAttachmentQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     LogMail $logMail Object to remove from the list of results
	 *
	 * @return    LogMailQuery The current query, for fluid interface
	 */
	public function prune($logMail = null)
	{
		if ($logMail) {
			$this->addUsingAlias(LogMailPeer::ID, $logMail->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseLogMailQuery
