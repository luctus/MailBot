<?php


/**
 * Skeleton subclass for representing a row from the 'mb_mailto' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Jun  8 16:04:14 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class MbMailto extends BaseMbMailto {

  private $emails = false;

  public function getEmails()
  {
    if($this->emails)
      return $this->emails;

    $this->emails = array();
    foreach(split('[,;]', $this->getMailto()) as $email)
    {
      $this->emails[] = MailbotTools::getAutoAddress(trim($email), true);
    }

    return $this->emails;
  }

  public function validateAndReport()
  {
    $is_valid = true;
    foreach($this->getEmails() as $email)
    {
      if(!$this->isValid($email))
        $is_valid = false;
    }

    if($is_valid)
      return true;

    $this->setState('error');
    $this->setError('Direccion de correo invalida.');
    $this->setSentAt(time());
    $this->save();

    return false;
  }

  public function isValid_($email = false, $strict = true)
  {
    if(!$email)
      $email = $this->getMailto();

    $isValid = true;
		$atIndex = strrpos($email, "@");

    if (is_bool($atIndex) && !$atIndex)
		{
      $isValid = false;
    }
    else
    {
      $domain = substr($email, $atIndex+1);
      $local = substr($email, 0, $atIndex);
      $localLen = strlen($local);
      $domainLen = strlen($domain);
      if ($localLen < 1 || $localLen > 64)
      {
        // local part length exceeded
        $isValid = false;
      }
      else if ($domainLen < 1 || $domainLen > 255)
      {
          // domain part length exceeded
        $isValid = false;
      }
      else if ($local[0] == '.' || $local[$localLen-1] == '.')
      {
         // local part starts or ends with '.'
         $isValid = false;
      }
      else if (preg_match('/\\.\\./', $local))
      {
        // local part has two consecutive dots
        $isValid = false;
      }
      else if (!preg_match('/^[A-Za-z0-9\\-\\.]+$/', $domain))
      {
        // character not valid in domain part
        $isValid = false;
      }
      else if (preg_match('/\\.\\./', $domain))
      {
        // domain part has two consecutive dots
        $isValid = false;
      }
      else if (!preg_match('/^(\\\\.|[A-Za-z0-9!#%&`_=\\/$\'*+?^{}|~.-])+$/', str_replace("\\\\","",$local)))
      {
          // character not valid in local part unless
          // local part is quoted
          if (!preg_match('/^"(\\\\"|[^"])+"$/', str_replace("\\\\","",$local)))
        {
            $isValid = false;
        }
      }
      if ($isValid && $strict && !(checkdnsrr($domain,"MX") || checkdnsrr($domain,"A")))
      {
          // domain not found in DNS
          $isValid = false;
      }
    }

    return $isValid;

  }

  public function isValid($email)
  {

     // Create the syntactical validation regular expression
     $regexp = "^([_a-z0-9-]+)(\.[_a-z0-9-]+)*@([a-z0-9-]+)(\.[a-z0-9-]+)*(\.[a-z]{2,4})$";

     // Presume that the email is invalid
     $valid = 0;

     // Validate the syntax
     if (eregi($regexp, $email))
     {
        list($username,$domaintld) = split("@",$email);
        // Validate the domain
        if (getmxrr($domaintld,$mxrecords))
           $valid = 1;
     } else {
        $valid = 0;
     }

     return $valid;

  }
//TODO: al parecer el mail mail@dominio.cl. es valido (terminado en ".")
} // MbMailto


